// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ItemBrought extends ethereum.Event {
  get params(): ItemBrought__Params {
    return new ItemBrought__Params(this);
  }
}

export class ItemBrought__Params {
  _event: ItemBrought;

  constructor(event: ItemBrought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ItemCanceled extends ethereum.Event {
  get params(): ItemCanceled__Params {
    return new ItemCanceled__Params(this);
  }
}

export class ItemCanceled__Params {
  _event: ItemCanceled;

  constructor(event: ItemCanceled) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ItemListed extends ethereum.Event {
  get params(): ItemListed__Params {
    return new ItemListed__Params(this);
  }
}

export class ItemListed__Params {
  _event: ItemListed;

  constructor(event: ItemListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ItemRefunded extends ethereum.Event {
  get params(): ItemRefunded__Params {
    return new ItemRefunded__Params(this);
  }
}

export class ItemRefunded__Params {
  _event: ItemRefunded;

  constructor(event: ItemRefunded) {
    this._event = event;
  }

  get refunder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PublicBrought extends ethereum.Event {
  get params(): PublicBrought__Params {
    return new PublicBrought__Params(this);
  }
}

export class PublicBrought__Params {
  _event: PublicBrought;

  constructor(event: PublicBrought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PublicCanceled extends ethereum.Event {
  get params(): PublicCanceled__Params {
    return new PublicCanceled__Params(this);
  }
}

export class PublicCanceled__Params {
  _event: PublicCanceled;

  constructor(event: PublicCanceled) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PublicItemListed extends ethereum.Event {
  get params(): PublicItemListed__Params {
    return new PublicItemListed__Params(this);
  }
}

export class PublicItemListed__Params {
  _event: PublicItemListed;

  constructor(event: PublicItemListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get publicSaleCounter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawSucceed extends ethereum.Event {
  get params(): WithdrawSucceed__Params {
    return new WithdrawSucceed__Params(this);
  }
}

export class WithdrawSucceed__Params {
  _event: WithdrawSucceed;

  constructor(event: WithdrawSucceed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NoRug_marketplace__getListResultValue0Struct extends ethereum.Tuple {
  get Price(): BigInt {
    return this[0].toBigInt();
  }

  get Seller(): Address {
    return this[1].toAddress();
  }
}

export class NoRug_marketplace__getPublicListResultValue0Struct extends ethereum.Tuple {
  get Price(): BigInt {
    return this[0].toBigInt();
  }

  get Seller(): Address {
    return this[1].toAddress();
  }

  get Amount(): BigInt {
    return this[2].toBigInt();
  }

  get BroughtAmount(): BigInt {
    return this[3].toBigInt();
  }

  get RefundAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class NoRug_marketplace extends ethereum.SmartContract {
  static bind(address: Address): NoRug_marketplace {
    return new NoRug_marketplace("NoRug_marketplace", address);
  }

  getBalance(owner: Address): BigInt {
    let result = super.call("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getList(
    nftAddress: Address,
    tokenId: BigInt
  ): NoRug_marketplace__getListResultValue0Struct {
    let result = super.call(
      "getList",
      "getList(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<NoRug_marketplace__getListResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getList(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<NoRug_marketplace__getListResultValue0Struct> {
    let result = super.tryCall(
      "getList",
      "getList(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NoRug_marketplace__getListResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPublicBalance(owner: Address): BigInt {
    let result = super.call(
      "getPublicBalance",
      "getPublicBalance(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_getPublicBalance(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPublicBalance",
      "getPublicBalance(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPublicList(
    nftAddress: Address
  ): NoRug_marketplace__getPublicListResultValue0Struct {
    let result = super.call(
      "getPublicList",
      "getPublicList(address):((uint256,address,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(nftAddress)]
    );

    return changetype<NoRug_marketplace__getPublicListResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPublicList(
    nftAddress: Address
  ): ethereum.CallResult<NoRug_marketplace__getPublicListResultValue0Struct> {
    let result = super.tryCall(
      "getPublicList",
      "getPublicList(address):((uint256,address,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(nftAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NoRug_marketplace__getPublicListResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPublicSaleTimeStamp(nftAddress: Address, publicSaleCount: BigInt): BigInt {
    let result = super.call(
      "getPublicSaleTimeStamp",
      "getPublicSaleTimeStamp(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(publicSaleCount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPublicSaleTimeStamp(
    nftAddress: Address,
    publicSaleCount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPublicSaleTimeStamp",
      "getPublicSaleTimeStamp(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(publicSaleCount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimePeriodOne(): BigInt {
    let result = super.call(
      "getTimePeriodOne",
      "getTimePeriodOne():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTimePeriodOne(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimePeriodOne",
      "getTimePeriodOne():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimePeriodTwo(): BigInt {
    let result = super.call(
      "getTimePeriodTwo",
      "getTimePeriodTwo():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTimePeriodTwo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimePeriodTwo",
      "getTimePeriodTwo():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getpublicSaleCount(): BigInt {
    let result = super.call(
      "getpublicSaleCount",
      "getpublicSaleCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getpublicSaleCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getpublicSaleCount",
      "getpublicSaleCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_timePeriodOne(): BigInt {
    let result = super.call(
      "s_timePeriodOne",
      "s_timePeriodOne():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_s_timePeriodOne(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_timePeriodOne",
      "s_timePeriodOne():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_timePeriodTwo(): BigInt {
    let result = super.call(
      "s_timePeriodTwo",
      "s_timePeriodTwo():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_s_timePeriodTwo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "s_timePeriodTwo",
      "s_timePeriodTwo():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class CancelListCall extends ethereum.Call {
  get inputs(): CancelListCall__Inputs {
    return new CancelListCall__Inputs(this);
  }

  get outputs(): CancelListCall__Outputs {
    return new CancelListCall__Outputs(this);
  }
}

export class CancelListCall__Inputs {
  _call: CancelListCall;

  constructor(call: CancelListCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListCall__Outputs {
  _call: CancelListCall;

  constructor(call: CancelListCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }
}

export class PublicBuyCall extends ethereum.Call {
  get inputs(): PublicBuyCall__Inputs {
    return new PublicBuyCall__Inputs(this);
  }

  get outputs(): PublicBuyCall__Outputs {
    return new PublicBuyCall__Outputs(this);
  }
}

export class PublicBuyCall__Inputs {
  _call: PublicBuyCall;

  constructor(call: PublicBuyCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PublicBuyCall__Outputs {
  _call: PublicBuyCall;

  constructor(call: PublicBuyCall) {
    this._call = call;
  }
}

export class PublicSaleCall extends ethereum.Call {
  get inputs(): PublicSaleCall__Inputs {
    return new PublicSaleCall__Inputs(this);
  }

  get outputs(): PublicSaleCall__Outputs {
    return new PublicSaleCall__Outputs(this);
  }
}

export class PublicSaleCall__Inputs {
  _call: PublicSaleCall;

  constructor(call: PublicSaleCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PublicSaleCall__Outputs {
  _call: PublicSaleCall;

  constructor(call: PublicSaleCall) {
    this._call = call;
  }
}

export class PublicSaleCancelCall extends ethereum.Call {
  get inputs(): PublicSaleCancelCall__Inputs {
    return new PublicSaleCancelCall__Inputs(this);
  }

  get outputs(): PublicSaleCancelCall__Outputs {
    return new PublicSaleCancelCall__Outputs(this);
  }
}

export class PublicSaleCancelCall__Inputs {
  _call: PublicSaleCancelCall;

  constructor(call: PublicSaleCancelCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PublicSaleCancelCall__Outputs {
  _call: PublicSaleCancelCall;

  constructor(call: PublicSaleCancelCall) {
    this._call = call;
  }
}

export class RefundPublicSaleCall extends ethereum.Call {
  get inputs(): RefundPublicSaleCall__Inputs {
    return new RefundPublicSaleCall__Inputs(this);
  }

  get outputs(): RefundPublicSaleCall__Outputs {
    return new RefundPublicSaleCall__Outputs(this);
  }
}

export class RefundPublicSaleCall__Inputs {
  _call: RefundPublicSaleCall;

  constructor(call: RefundPublicSaleCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get publicSalesCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RefundPublicSaleCall__Outputs {
  _call: RefundPublicSaleCall;

  constructor(call: RefundPublicSaleCall) {
    this._call = call;
  }
}

export class UpgradeListingCall extends ethereum.Call {
  get inputs(): UpgradeListingCall__Inputs {
    return new UpgradeListingCall__Inputs(this);
  }

  get outputs(): UpgradeListingCall__Outputs {
    return new UpgradeListingCall__Outputs(this);
  }
}

export class UpgradeListingCall__Inputs {
  _call: UpgradeListingCall;

  constructor(call: UpgradeListingCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpgradeListingCall__Outputs {
  _call: UpgradeListingCall;

  constructor(call: UpgradeListingCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalancePublicCall extends ethereum.Call {
  get inputs(): WithdrawBalancePublicCall__Inputs {
    return new WithdrawBalancePublicCall__Inputs(this);
  }

  get outputs(): WithdrawBalancePublicCall__Outputs {
    return new WithdrawBalancePublicCall__Outputs(this);
  }
}

export class WithdrawBalancePublicCall__Inputs {
  _call: WithdrawBalancePublicCall;

  constructor(call: WithdrawBalancePublicCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get publicSaleCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBalancePublicCall__Outputs {
  _call: WithdrawBalancePublicCall;

  constructor(call: WithdrawBalancePublicCall) {
    this._call = call;
  }
}
